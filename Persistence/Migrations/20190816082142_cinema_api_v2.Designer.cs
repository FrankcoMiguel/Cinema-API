// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

namespace Persistence.Migrations
{
    [DbContext(typeof(CinemaDbContext))]
    [Migration("20190816082142_cinema_api_v2")]
    partial class cinema_api_v2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Model.Actor", b =>
                {
                    b.Property<int>("ActorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age");

                    b.Property<string>("FirstName");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)));

                    b.Property<string>("LastName");

                    b.Property<int>("PhotoId");

                    b.Property<string>("Rating");

                    b.HasKey("ActorId");

                    b.HasIndex("PhotoId")
                        .IsUnique();

                    b.ToTable("Actor");
                });

            modelBuilder.Entity("Model.ActorFilm", b =>
                {
                    b.Property<int>("ActorId");

                    b.Property<int>("FilmId");

                    b.HasKey("ActorId", "FilmId");

                    b.HasIndex("FilmId");

                    b.ToTable("ActorFilm");
                });

            modelBuilder.Entity("Model.Director", b =>
                {
                    b.Property<int>("DirectorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age");

                    b.Property<string>("FirstName");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)));

                    b.Property<string>("LastName");

                    b.Property<int>("PhotoId");

                    b.Property<string>("Rating");

                    b.HasKey("DirectorId");

                    b.HasIndex("PhotoId")
                        .IsUnique();

                    b.ToTable("Director");
                });

            modelBuilder.Entity("Model.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<int>("PhotoId");

                    b.Property<int>("StaffId");

                    b.HasKey("EmployeeId");

                    b.HasIndex("PhotoId")
                        .IsUnique();

                    b.HasIndex("StaffId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("Model.Film", b =>
                {
                    b.Property<int>("FilmId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<int>("DirectorId");

                    b.Property<string>("Duration");

                    b.Property<string>("Genre");

                    b.Property<int>("PhotoId");

                    b.Property<string>("Rating");

                    b.Property<string>("Title");

                    b.Property<int>("Year");

                    b.HasKey("FilmId");

                    b.HasIndex("DirectorId");

                    b.HasIndex("PhotoId")
                        .IsUnique();

                    b.ToTable("Film");
                });

            modelBuilder.Entity("Model.Photo", b =>
                {
                    b.Property<int>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caption");

                    b.Property<string>("Url");

                    b.HasKey("PhotoId");

                    b.ToTable("Photo");
                });

            modelBuilder.Entity("Model.Snack", b =>
                {
                    b.Property<int>("SnackId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cost");

                    b.Property<string>("Name");

                    b.Property<int>("PhotoId");

                    b.Property<string>("Size");

                    b.HasKey("SnackId");

                    b.HasIndex("PhotoId")
                        .IsUnique();

                    b.ToTable("Snack");
                });

            modelBuilder.Entity("Model.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Salary");

                    b.Property<string>("Title");

                    b.HasKey("StaffId");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("Model.Actor", b =>
                {
                    b.HasOne("Model.Photo", "Photo")
                        .WithOne("Actor")
                        .HasForeignKey("Model.Actor", "PhotoId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.ActorFilm", b =>
                {
                    b.HasOne("Model.Actor", "Actor")
                        .WithMany("Films")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Film", "Film")
                        .WithMany("Actors")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.Director", b =>
                {
                    b.HasOne("Model.Photo", "Photo")
                        .WithOne("Director")
                        .HasForeignKey("Model.Director", "PhotoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.Employee", b =>
                {
                    b.HasOne("Model.Photo", "Photo")
                        .WithOne("Employee")
                        .HasForeignKey("Model.Employee", "PhotoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Staff", "Title")
                        .WithMany("Employees")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.Film", b =>
                {
                    b.HasOne("Model.Director", "Director")
                        .WithMany("Films")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Photo", "Photo")
                        .WithOne("Film")
                        .HasForeignKey("Model.Film", "PhotoId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Model.Snack", b =>
                {
                    b.HasOne("Model.Photo", "Photo")
                        .WithOne("Snack")
                        .HasForeignKey("Model.Snack", "PhotoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
